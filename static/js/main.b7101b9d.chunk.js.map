{"version":3,"sources":["redux/modules/app/index.js","redux/modules/app/types.js","redux/reducers.js","utils/index.js","components/ListCurrency/index.js","redux/modules/app/actions.js","components/CurrencyPicker/index.js","components/Main/index.js","App.js","serviceWorker.js","index.js","redux/configureStore.js"],"names":["initialState","loading","currency","amount","error","listCurrency","selectedCurrencies","ACTION_HANDLERS","state","action","payload","cloneDeep","push","index","indexOf","splice","combineReducers","app","handler","type","supportedCurrency","connect","defaultCurrency","removeSelectedCurrency","props","className","numeral","format","onClick","addSelectedCurrency","useState","editMode","setEditMode","selectedCurrency","changeCurrency","availableOption","Object","keys","filter","item","value","onChange","e","target","map","key","getAllExchanger","dispatch","axios","get","responseType","then","response","status","data","rates","supported","supportedRates","forEach","catch","setAmount","useEffect","App","Boolean","window","location","hostname","match","store","preloadedState","composeEnhancers","compose","middleware","thunk","createStore","reducers","applyMiddleware","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b7101b9d.chunk.js","sourcesContent":["import * as types from \"./types\";\r\nimport {cloneDeep} from \"lodash\";\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  currency: 'USD',\r\n  amount: 10,\r\n  error: '',\r\n  listCurrency: {},\r\n  selectedCurrencies: [],\r\n};\r\n\r\nconst ACTION_HANDLERS = {\r\n  [types.FETCH_EXCHANGER]: (state) => {\r\n    return {\r\n      ...state,\r\n      error: '',\r\n      loading: true\r\n    }\r\n  },\r\n  [types.FETCH_EXCHANGER_ERROR]: (state, action) => {\r\n    const {payload} = action;\r\n    return {\r\n      ...state,\r\n      loading: false,\r\n      error: payload,\r\n    }\r\n  },\r\n  [types.FETCH_EXCHANGER_SUCCESS]: (state, action) => {\r\n    const {payload} = action;\r\n    return {\r\n      ...state,\r\n      error: '',\r\n      listCurrency: payload,\r\n      loading: false\r\n    }\r\n  },\r\n  [types.SET_AMOUNT]: (state, action) => {\r\n    const {payload} = action;\r\n    return {\r\n      ...state,\r\n      amount: payload,\r\n    }\r\n  },\r\n  [types.ADD_SELECTED_CURRENCY]: (state, action) => {\r\n    const selectedCurrencies = cloneDeep(state.selectedCurrencies);\r\n    const {payload} = action;\r\n    selectedCurrencies.push(payload);\r\n    return {\r\n      ...state,\r\n      selectedCurrencies\r\n    }\r\n  },\r\n  [types.REMOVE_SELECTED_CURRENCY]: (state, action) => {\r\n    const selectedCurrencies = cloneDeep(state.selectedCurrencies);\r\n    const {payload} = action;\r\n\r\n    const index = selectedCurrencies.indexOf(payload);\r\n    if (index === -1) return state;\r\n\r\n    selectedCurrencies.splice(index, 1);\r\n    return {\r\n      ...state,\r\n      selectedCurrencies\r\n    }\r\n  },\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  const handler = ACTION_HANDLERS[action.type];\r\n\r\n  return handler ? handler(state, action) : state;\r\n}\r\n","export const START_LOADING = 'START_LOADING';\r\nexport const STOP_LOADING = 'STOP_LOADING';\r\nexport const FETCH_EXCHANGER = 'FETCH_EXCHANGER';\r\nexport const FETCH_EXCHANGER_SUCCESS = 'FETCH_EXCHANGER_SUCCESS';\r\nexport const FETCH_EXCHANGER_ERROR = 'FETCH_EXCHANGER_ERROR';\r\nexport const SET_AMOUNT = 'SET_AMOUNT';\r\nexport const ADD_SELECTED_CURRENCY = 'ADD_SELECTED_CURRENCY';\r\nexport const REMOVE_SELECTED_CURRENCY= 'REMOVE_SELECTED_CURRENCY';\r\n","import {combineReducers} from \"redux\";\r\n\r\nimport app from \"./modules/app\";\r\n\r\nexport default combineReducers({\r\n  app\r\n});\r\n","export const supportedCurrency = {\r\n  'USD': 'United State Dollar',\r\n  'CAD': 'Canadian Dollar',\r\n  'IDR': 'Indonesian rupiah',\r\n  'GBP': 'British Pound',\r\n  'CHF': 'Swiss Franc',\r\n  'SGD': 'Singapore Dollar',\r\n  'INR': 'Indian Rupee',\r\n  'MYR': 'Malaysian Ringgit',\r\n  'JPY': 'Japanese Yen',\r\n  'KRW': 'South Korean Won'\r\n};\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport numeral from \"numeral\";\r\nimport {removeSelectedCurrency} from \"../../redux/actions\";\r\nimport {supportedCurrency} from \"../../utils\";\r\nimport \"./styles.scss\";\r\n\r\nfunction ListCurrency(props) {\r\n\r\n  const {currency, defaultCurrency, amount, listCurrency, removeSelectedCurrency} = props;\r\n\r\n  const removeCurrency = () => {\r\n    removeSelectedCurrency(currency);\r\n  };\r\n\r\n  return <div className=\"list-currency\">\r\n    <div>\r\n      <div className=\"total-area\">\r\n        <span>\r\n          {currency}\r\n        </span>\r\n        <span>\r\n          {numeral(amount * listCurrency[currency]).format('0,0.00')}\r\n        </span>\r\n      </div>\r\n      <div className=\"label\">\r\n        <i>{currency} - {supportedCurrency[currency]}</i>\r\n      </div>\r\n      <div className=\"curs\">\r\n        1 {defaultCurrency} = {currency} {numeral(listCurrency[currency]).format('0,0.00')}\r\n      </div>\r\n    </div>\r\n    <div onClick={removeCurrency}>\r\n      <i className=\"min-icon fa fa-minus-circle\"/>\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default connect(({app: {amount, currency: defaultCurrency, listCurrency}}) => ({\r\n  amount,\r\n  listCurrency,\r\n  defaultCurrency\r\n}), {removeSelectedCurrency})(ListCurrency);\r\n","import axios from \"axios\";\r\nimport {supportedCurrency} from \"../../../utils\";\r\nimport * as types from \"./types\";\r\n\r\nexport const getAllExchanger = currency => dispatch => {\r\n  dispatch({\r\n    type: types.FETCH_EXCHANGER\r\n  });\r\n\r\n  axios.get(`https://api.exchangeratesapi.io/latest?base=${currency}`, {\r\n    responseType: 'json'\r\n  }).then(response => {\r\n    const {status, data} = response || {};\r\n    if (status === 200) {\r\n      const {rates} = data;\r\n      const supported = Object.keys(supportedCurrency);\r\n\r\n      const supportedRates = {};\r\n      Object.keys(rates).forEach(item => {\r\n        if (supported.indexOf(item) > -1) {\r\n          supportedRates[item] = rates[item];\r\n        }\r\n      });\r\n\r\n      dispatch({\r\n        type: types.FETCH_EXCHANGER_SUCCESS,\r\n        payload: supportedRates\r\n      });\r\n\r\n    } else {\r\n      dispatch({\r\n        type: types.FETCH_EXCHANGER_ERROR,\r\n        payload: `Please try again. Error code: ${status}`\r\n      });\r\n    }\r\n  }).catch(error => {\r\n    dispatch({\r\n      type: types.FETCH_EXCHANGER_ERROR,\r\n      payload: `${error}`,\r\n    });\r\n  });\r\n};\r\n\r\nexport const setAmount = amount => {\r\n  return {\r\n    type: types.SET_AMOUNT,\r\n    payload: amount\r\n  }\r\n};\r\n\r\n\r\nexport const addSelectedCurrency = currency => {\r\n  return {\r\n    type: types.ADD_SELECTED_CURRENCY,\r\n    payload: currency\r\n  }\r\n};\r\n\r\n\r\nexport const removeSelectedCurrency = currency => {\r\n  return {\r\n    type: types.REMOVE_SELECTED_CURRENCY,\r\n    payload: currency\r\n  }\r\n};\r\n","import React, {useState} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {addSelectedCurrency} from \"../../redux/actions\";\r\nimport \"./styles.scss\";\r\n\r\nfunction CurrencyPicker(props) {\r\n  const {listCurrency, addSelectedCurrency, selectedCurrencies} = props;\r\n\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [selectedCurrency, changeCurrency] = useState('');\r\n\r\n  const changeSelectedCurrency = e => {\r\n    const {value} = e.target;\r\n\r\n    if (!value) return;\r\n\r\n    changeCurrency(value);\r\n  };\r\n\r\n  const submit = () => {\r\n    if (!selectedCurrency) return;\r\n\r\n    addSelectedCurrency(selectedCurrency);\r\n    changeCurrency(\"\");\r\n    setEditMode(!editMode);\r\n  };\r\n\r\n  const toggleEditMode = () => {\r\n    setEditMode(!editMode);\r\n  };\r\n\r\n  const availableOption = Object.keys(listCurrency).filter(item => selectedCurrencies.indexOf(item) === -1);\r\n\r\n  return <div className=\"currency-picker\">\r\n    {!editMode && <div className=\"add-currency-picker\" onClick={toggleEditMode}>+ Add more currencies</div>}\r\n    {editMode && <div className=\"editor-picker\">\r\n      <select value={selectedCurrency} onChange={changeSelectedCurrency}>\r\n        <option value=\"\">--Please select--</option>\r\n        {availableOption.map(item => <option key={item} value={item}>{item}</option>)}\r\n      </select>\r\n      <button className=\"btn btn-primary\" onClick={submit}>Submit</button>\r\n    </div>}\r\n  </div>\r\n}\r\n\r\nexport default connect(({app: {listCurrency, selectedCurrencies}}) => ({\r\n  listCurrency,\r\n  selectedCurrencies\r\n}), {addSelectedCurrency})(CurrencyPicker);\r\n\r\n\r\n","import React, {useEffect, useState} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport ListCurrency from \"../ListCurrency\";\r\nimport CurrencyPicker from \"../CurrencyPicker\";\r\nimport {getAllExchanger, setAmount} from \"../../redux/actions\";\r\nimport \"./styles.scss\";\r\n\r\nfunction Main(props) {\r\n  const {selectedCurrencies, currency, amount, getAllExchanger, setAmount} = props;\r\n\r\n  const onAmountChange = e => {\r\n    const {value} = e.target;\r\n    setAmount(value >= 0 ? value : 0);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAllExchanger(currency);\r\n  }, []);\r\n\r\n  return <div className=\"main-app\">\r\n    <div className=\"header-box\">\r\n      <span>USD - United State Dollar</span>\r\n      <div className=\"currency-area\">\r\n        <div>{currency}</div>\r\n        <div><input className=\"form-control\" value={amount} type=\"number\" onChange={onAmountChange}/></div>\r\n      </div>\r\n    </div>\r\n\r\n    <div className=\"body-box\">\r\n      {selectedCurrencies.map(item => <ListCurrency key={item} amount={amount} currency={item}/>)}\r\n    </div>\r\n\r\n    <div className=\"footer-box\">\r\n      <CurrencyPicker/>\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default connect(({app: {listCurrency, currency, amount, selectedCurrencies}}) => ({\r\n  listCurrency,\r\n  currency,\r\n  amount,\r\n  selectedCurrencies\r\n}), {\r\n  getAllExchanger, setAmount\r\n})(Main);\r\n","import React from 'react';\r\nimport Main from \"./components/Main\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"font-awesome/css/font-awesome.min.css\";\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <Main/>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from \"react-redux\";\r\nimport configureStore from \"./redux/configureStore\";\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst store = configureStore();\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App/>\r\n  </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import {createStore, applyMiddleware, compose} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducers from \"./reducers\";\r\n\r\nconst isDev = process.env.NODE_ENV !== 'production';\r\n\r\nexport default (preloadedState = {}, client = null) => {\r\n  let composeEnhancers = compose;\r\n  const middleware = [thunk];\r\n\r\n  //Using Redux devtools when on development mode\r\n  if (isDev && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\r\n    composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({});\r\n  }\r\n\r\n  return createStore(reducers, preloadedState, composeEnhancers(applyMiddleware(...middleware)));\r\n}\r\n"],"sourceRoot":""}
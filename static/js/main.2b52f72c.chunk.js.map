{"version":3,"sources":["redux/modules/app/index.js","redux/modules/app/types.js","redux/reducers.js","utils/index.js","components/ListCurrency/index.js","redux/modules/app/actions.js","components/CurrencyPicker/index.js","components/Main/index.js","App.js","serviceWorker.js","index.js","redux/configureStore.js"],"names":["initialState","loading","currency","amount","error","listCurrency","selectedCurrencies","ACTION_HANDLERS","state","action","payload","cloneDeep","push","index","indexOf","splice","combineReducers","app","handler","type","supportedCurrency","connect","defaultCurrency","removeSelectedCurrency","props","className","numeral","format","onClick","addSelectedCurrency","useState","editMode","setEditMode","selectedCurrency","changeCurrency","availableOption","Object","keys","filter","item","value","onChange","e","target","map","key","getAllExchanger","dispatch","axios","get","responseType","then","response","status","data","rates","supported","supportedRates","forEach","catch","setAmount","useEffect","App","Boolean","window","location","hostname","match","store","preloadedState","composeEnhancers","compose","middleware","thunk","createStore","reducers","applyMiddleware","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2b52f72c.chunk.js","sourcesContent":["import * as types from \"./types\";\nimport {cloneDeep} from \"lodash\";\n\nconst initialState = {\n  loading: true,\n  currency: 'USD',\n  amount: 10,\n  error: '',\n  listCurrency: {},\n  selectedCurrencies: [],\n};\n\nconst ACTION_HANDLERS = {\n  [types.FETCH_EXCHANGER]: (state) => {\n    return {\n      ...state,\n      error: '',\n      loading: true\n    }\n  },\n  [types.FETCH_EXCHANGER_ERROR]: (state, action) => {\n    const {payload} = action;\n    return {\n      ...state,\n      loading: false,\n      error: payload,\n    }\n  },\n  [types.FETCH_EXCHANGER_SUCCESS]: (state, action) => {\n    const {payload} = action;\n    return {\n      ...state,\n      error: '',\n      listCurrency: payload,\n      loading: false\n    }\n  },\n  [types.SET_AMOUNT]: (state, action) => {\n    const {payload} = action;\n    return {\n      ...state,\n      amount: payload,\n    }\n  },\n  [types.ADD_SELECTED_CURRENCY]: (state, action) => {\n    const selectedCurrencies = cloneDeep(state.selectedCurrencies);\n    const {payload} = action;\n    selectedCurrencies.push(payload);\n    return {\n      ...state,\n      selectedCurrencies\n    }\n  },\n  [types.REMOVE_SELECTED_CURRENCY]: (state, action) => {\n    const selectedCurrencies = cloneDeep(state.selectedCurrencies);\n    const {payload} = action;\n\n    const index = selectedCurrencies.indexOf(payload);\n    if (index === -1) return state;\n\n    selectedCurrencies.splice(index, 1);\n    return {\n      ...state,\n      selectedCurrencies\n    }\n  },\n};\n\nexport default (state = initialState, action) => {\n  const handler = ACTION_HANDLERS[action.type];\n\n  return handler ? handler(state, action) : state;\n}\n","export const START_LOADING = 'START_LOADING';\nexport const STOP_LOADING = 'STOP_LOADING';\nexport const FETCH_EXCHANGER = 'FETCH_EXCHANGER';\nexport const FETCH_EXCHANGER_SUCCESS = 'FETCH_EXCHANGER_SUCCESS';\nexport const FETCH_EXCHANGER_ERROR = 'FETCH_EXCHANGER_ERROR';\nexport const SET_AMOUNT = 'SET_AMOUNT';\nexport const ADD_SELECTED_CURRENCY = 'ADD_SELECTED_CURRENCY';\nexport const REMOVE_SELECTED_CURRENCY= 'REMOVE_SELECTED_CURRENCY';\n","import {combineReducers} from \"redux\";\n\nimport app from \"./modules/app\";\n\nexport default combineReducers({\n  app\n});\n","export const supportedCurrency = {\n  'USD': 'United State Dollar',\n  'CAD': 'Canadian Dollar',\n  'IDR': 'Indonesian rupiah',\n  'GBP': 'British Pound',\n  'CHF': 'Swiss Franc',\n  'SGD': 'Singapore Dollar',\n  'INR': 'Indian Rupee',\n  'MYR': 'Malaysian Ringgit',\n  'JPY': 'Japanese Yen',\n  'KRW': 'South Korean Won'\n};\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport numeral from \"numeral\";\nimport {removeSelectedCurrency} from \"../../redux/actions\";\nimport {supportedCurrency} from \"../../utils\";\nimport \"./styles.scss\";\n\nfunction ListCurrency(props) {\n\n  const {currency, defaultCurrency, amount, listCurrency, removeSelectedCurrency} = props;\n\n  const removeCurrency = () => {\n    removeSelectedCurrency(currency);\n  };\n\n  return <div className=\"list-currency\">\n    <div>\n      <div className=\"total-area\">\n        <span>\n          {currency}\n        </span>\n        <span>\n          {numeral(amount * listCurrency[currency]).format('0,0.00')}\n        </span>\n      </div>\n      <div className=\"label\">\n        <i>{currency} - {supportedCurrency[currency]}</i>\n      </div>\n      <div className=\"curs\">\n        1 {defaultCurrency} = {currency} {numeral(listCurrency[currency]).format('0,0.00')}\n      </div>\n    </div>\n    <div onClick={removeCurrency}>\n      <i className=\"min-icon fa fa-minus-circle\"/>\n    </div>\n  </div>\n}\n\nexport default connect(({app: {amount, currency: defaultCurrency, listCurrency}}) => ({\n  amount,\n  listCurrency,\n  defaultCurrency\n}), {removeSelectedCurrency})(ListCurrency);\n","import axios from \"axios\";\nimport {supportedCurrency} from \"../../../utils\";\nimport * as types from \"./types\";\n\nexport const getAllExchanger = currency => dispatch => {\n  dispatch({\n    type: types.FETCH_EXCHANGER\n  });\n\n  axios.get(`https://api.exchangeratesapi.io/latest?base=${currency}`, {\n    responseType: 'json'\n  }).then(response => {\n    const {status, data} = response || {};\n    if (status === 200) {\n      const {rates} = data;\n      const supported = Object.keys(supportedCurrency);\n\n      const supportedRates = {};\n      Object.keys(rates).forEach(item => {\n        if (supported.indexOf(item) > -1) {\n          supportedRates[item] = rates[item];\n        }\n      });\n\n      dispatch({\n        type: types.FETCH_EXCHANGER_SUCCESS,\n        payload: supportedRates\n      });\n\n    } else {\n      dispatch({\n        type: types.FETCH_EXCHANGER_ERROR,\n        payload: `Please try again. Error code: ${status}`\n      });\n    }\n  }).catch(error => {\n    dispatch({\n      type: types.FETCH_EXCHANGER_ERROR,\n      payload: `${error}`,\n    });\n  });\n};\n\nexport const setAmount = amount => {\n  return {\n    type: types.SET_AMOUNT,\n    payload: amount\n  }\n};\n\n\nexport const addSelectedCurrency = currency => {\n  return {\n    type: types.ADD_SELECTED_CURRENCY,\n    payload: currency\n  }\n};\n\n\nexport const removeSelectedCurrency = currency => {\n  return {\n    type: types.REMOVE_SELECTED_CURRENCY,\n    payload: currency\n  }\n};\n","import React, {useState} from \"react\";\nimport {connect} from \"react-redux\";\nimport {addSelectedCurrency} from \"../../redux/actions\";\nimport \"./styles.scss\";\n\nfunction CurrencyPicker(props) {\n  const {listCurrency, addSelectedCurrency, selectedCurrencies} = props;\n\n  const [editMode, setEditMode] = useState(false);\n  const [selectedCurrency, changeCurrency] = useState('');\n\n  const changeSelectedCurrency = e => {\n    const {value} = e.target;\n\n    if (!value) return;\n\n    changeCurrency(value);\n  };\n\n  const submit = () => {\n    if (!selectedCurrency) return;\n\n    addSelectedCurrency(selectedCurrency);\n    changeCurrency(\"\");\n    setEditMode(!editMode);\n  };\n\n  const toggleEditMode = () => {\n    setEditMode(!editMode);\n  };\n\n  const availableOption = Object.keys(listCurrency).filter(item => selectedCurrencies.indexOf(item) === -1);\n\n  return <div className=\"currency-picker\">\n    {!editMode && <div className=\"add-currency-picker\" onClick={toggleEditMode}>+ Add more currencies</div>}\n    {editMode && <div className=\"editor-picker\">\n      <select value={selectedCurrency} onChange={changeSelectedCurrency}>\n        <option value=\"\">--Please select--</option>\n        {availableOption.map(item => <option key={item} value={item}>{item}</option>)}\n      </select>\n      <button className=\"btn btn-primary\" onClick={submit}>Submit</button>\n    </div>}\n  </div>\n}\n\nexport default connect(({app: {listCurrency, selectedCurrencies}}) => ({\n  listCurrency,\n  selectedCurrencies\n}), {addSelectedCurrency})(CurrencyPicker);\n\n\n","import React, {useEffect} from \"react\";\nimport {connect} from \"react-redux\";\nimport ListCurrency from \"../ListCurrency\";\nimport CurrencyPicker from \"../CurrencyPicker\";\nimport {getAllExchanger, setAmount} from \"../../redux/actions\";\nimport \"./styles.scss\";\n\nfunction Main(props) {\n  const {selectedCurrencies, currency, amount, getAllExchanger, setAmount,loading} = props;\n\n  const onAmountChange = e => {\n    const {value} = e.target;\n    setAmount(value >= 0 ? value : 0);\n  };\n\n  useEffect(() => {\n    getAllExchanger(currency);\n  }, []);\n\n  if(loading) return <div className=\"loading-box\">Loading...</div>;\n\n  return <div className=\"main-app\">\n    <div className=\"header-box\">\n      <span>USD - United State Dollar</span>\n      <div className=\"currency-area\">\n        <div>{currency}</div>\n        <div><input className=\"form-control\" value={amount} type=\"number\" onChange={onAmountChange}/></div>\n      </div>\n    </div>\n\n    <div className=\"body-box\">\n      {selectedCurrencies.map(item => <ListCurrency key={item} amount={amount} currency={item}/>)}\n    </div>\n\n    <div className=\"footer-box\">\n      <CurrencyPicker/>\n    </div>\n  </div>\n}\n\nexport default connect(({app: {listCurrency, currency, amount, selectedCurrencies,loading}}) => ({\n  listCurrency,\n  currency,\n  amount,\n  selectedCurrencies,\n  loading\n}), {\n  getAllExchanger, setAmount\n})(Main);\n","import React from 'react';\nimport Main from \"./components/Main\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <Main/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport configureStore from \"./redux/configureStore\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {createStore, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from \"./reducers\";\n\nconst isDev = process.env.NODE_ENV !== 'production';\n\nexport default (preloadedState = {}, client = null) => {\n  let composeEnhancers = compose;\n  const middleware = [thunk];\n\n  //Using Redux devtools when on development mode\n  if (isDev && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n    composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({});\n  }\n\n  return createStore(reducers, preloadedState, composeEnhancers(applyMiddleware(...middleware)));\n}\n"],"sourceRoot":""}